--Tabela Particionada por mês
DROP TABLE IF EXISTS TESTE_PARTICIONADA;
CREATE TABLE `TESTE_PARTICIONADA` (
  `id` int DEFAULT NULL,
  `code` varchar(100) DEFAULT NULL,
  `Date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
PARTITION BY RANGE (extract(month from `Date`))
(PARTITION P0 VALUES LESS THAN (02) ENGINE = InnoDB,
 PARTITION P1 VALUES LESS THAN (03) ENGINE = InnoDB,
 PARTITION P2 VALUES LESS THAN (04) ENGINE = InnoDB,
 PARTITION P3 VALUES LESS THAN (05) ENGINE = InnoDB,
 PARTITION P4 VALUES LESS THAN (06) ENGINE = InnoDB,
 PARTITION P5 VALUES LESS THAN (07) ENGINE = InnoDB,
 PARTITION P6 VALUES LESS THAN (08) ENGINE = InnoDB,
 PARTITION P7 VALUES LESS THAN (09) ENGINE = InnoDB,
 PARTITION P9 VALUES LESS THAN (10) ENGINE = InnoDB,
 PARTITION P10 VALUES LESS THAN (11) ENGINE = InnoDB,
 PARTITION P11 VALUES LESS THAN (12) ENGINE = InnoDB,
 PARTITION P12 VALUES LESS THAN MAXVALUE ENGINE = InnoDB)


--Procedure para carregar registros na tabela
DROP PROCEDURE IF EXISTS insertRowsTESTE_PARTICIONADA;
DELIMITER //  
CREATE PROCEDURE insertRowsTESTE_PARTICIONADA()   
BEGIN
DECLARE i INT DEFAULT 1; 
WHILE (i <= 10000) DO
    insert into TESTE_PARTICIONADA values (FLOOR(7 + (RAND() * 200)), LEFT(UUID(), 100), (current_timestamp - interval (rand() * 60 * 60 * 24 * 365 * 10) second));
    SET i = i+1;
END WHILE;
END;
//  
DELIMITER ;

CALL insertRowsTESTE_PARTICIONADA();



--Listar Partições e quantidade de linhas em cada
SELECT 	TABLE_NAME, 
		PARTITION_NAME, 
        PARTITION_DESCRIPTION, 
        TABLE_ROWS 
FROM information_schema.partitions 
WHERE 	TABLE_SCHEMA='DBA' AND 
		TABLE_NAME = 'TESTE_PARTICIONADA' AND 
    PARTITION_NAME IS NOT NULL


--Select em determinada partiçao
SELECT * FROM TESTE_PARTICIONADA PARTITION (P12);


--Truncar determinada partição
ALTER TABLE TESTE_PARTICIONADA TRUNCATE PARTITION P12;

